{"version":3,"sources":["components/topNav/TopNav.js","components/sidebar/Sidebar.js","components/main/titlebar/TitleBar.js","components/main/segmentIndicator/SegmentIndicator.js","components/main/condition/ConditionCard.js","components/main/condition/Conditions.js","components/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["TopNav","react_default","a","createElement","className","index_es","icon","faBell","size","Sidebar","faProjectDiagram","faTv","faUsers","faChartBar","faCloud","TitleBar","type","placeholder","faEdit","SegmentIndicator","ProgressBar_default","now","optionsPurchase1","value","label","optionsTech1","operatorValues","timeValues","ConditionCard","props","_useState","useState","_useState2","Object","slicedToArray","purchasOption1State","changePurchaseOption1State","_useState3","_useState4","purchasOption2State","changePurchaseOption2State","_useState5","_useState6","techOption1State","changeTechOption1State","_useState7","_useState8","operatorOption1State","changeOperator1State","_useState9","_useState10","operatorOption2State","changeOperator2State","react_select_browser_esm","onChange","options","Conditions","optionType","changeOptionType","conditionCards","map","conditionCard","condition_ConditionCard","onClick","dispatch","initState","progress","cardCount","reducer","state","action","objectSpread","questionCount","correctCount","wrongCount","btnStyle","Main","_useReducer","useReducer","_useReducer2","useEffect","titlebar_TitleBar","segmentIndicator_SegmentIndicator","condition_Conditions","App","topNav_TopNav","sidebar_Sidebar","components_main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb3533f2.chunk.js","sourcesContent":["import React from 'react'\nimport './TopNav.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBell } from '@fortawesome/free-solid-svg-icons'\n\nfunction TopNav() {\n    return (\n        <div className=\"topNav\">\n            <h1 className=\"logo\">\n                Qubit\n            </h1>\n            <div className=\"accountArea\">\n                <FontAwesomeIcon icon={faBell} className=\"makeMeGray\" size=\"2x\"/>\n                <div className=\"userBubble\">MK</div>\n                <p>Mike Kuerschner</p>\n                <p className=\"companyName\">Union Fashion</p>\n            </div>\n        </div>\n    )\n}\n\nexport default TopNav\n","import React from 'react'\nimport './Sidebar.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTv,faUsers, faChartBar, faCloud, faProjectDiagram } from '@fortawesome/free-solid-svg-icons'\n\nfunction Sidebar() {\n    return (\n        <div className=\"sideBar\">\n            <ul className=\"menuList\">\n                <li className=\"menuItem\"><FontAwesomeIcon icon={faProjectDiagram} className=\"makeMeWhite sectionIcon\"/>Overview</li>\n                <li className=\"menuItem\"><FontAwesomeIcon icon={faTv} className=\"makeMeWhite sectionIcon\"/>Experiences</li>\n                <li className=\"menuItem active\"><FontAwesomeIcon icon={faUsers} className=\"makeMeWhite sectionIcon\"/>Segements</li>\n                <li className=\"menuItem\"><FontAwesomeIcon icon={faChartBar} className=\"makeMeWhite sectionIcon\"/>Insights</li>\n                <li className=\"menuItem\"><FontAwesomeIcon icon={faCloud} className=\"makeMeWhite sectionIcon\"/>Visitor Cloud</li>\n            </ul>\n            \n        </div>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport './TitleBar.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEdit } from '@fortawesome/free-solid-svg-icons'\n\nfunction TitleBar() {\n    return (\n        <div className=\"titleBar\">\n          <input type=\"text\" className='titleInput' placeholder=\"Enter Segment Name\"></input>\n          <FontAwesomeIcon icon={faEdit} className=\"makeMeWhite\" size=\"2x\"/>\n          <button className=\"btn btnWhite\">Save Changes</button>\n          <button className=\"btn btnOutline\">Preview</button>\n          <button className=\"btn btnOutline\">Exit</button>\n          <p className=\"authorText\">Created by Mike Kuerschner</p>\n\n        </div>\n    )\n}\n\nexport default TitleBar\n","import React from 'react'\nimport './SegmentIndicator.css'\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nfunction SegmentIndicator() {\n    return (\n        <div className=\"segmentIndicator\">\n            <div className=\"card\">\n                <h2>Estimated segment size</h2>\n                <p> of your total traffic expected to join based on a sample of historical data</p>\n                <ProgressBar now={60} />\n            </div>\n        </div>\n    )\n}\n\nexport default SegmentIndicator\n","import React, { useState} from 'react'\nimport Select from 'react-select';\n\nconst optionsPurchase1 = [\n    { value: 'cat', label: 'Category' },\n    { value: 'name', label: 'Name' }\n  ];\n\nconst optionsTech1 = [\n    { value: 'device', label: 'Device' },\n    { value: 'browser', label: 'Browser' }\n];\n\nconst operatorValues = [\n    { value: 'is', label: 'is' },\n    { value: 'is one of', label: 'is one of' },\n    { value: 'on', label: 'on'}\n];\n\nconst timeValues = [\n    { value: 'purchase', label: 'Products purchased' },\n    { value: 'addedToCart', label: 'Products added to cart' }\n];\n\n\n\nconst ConditionCard = props => {\n\n    const [purchasOption1State, changePurchaseOption1State] = useState();\n    const [purchasOption2State, changePurchaseOption2State] = useState();\n    const [techOption1State, changeTechOption1State] = useState();\n    const [operatorOption1State, changeOperator1State] = useState('is');\n    const [operatorOption2State, changeOperator2State] = useState();\n\n    if (props.type === \"purchase\") {\n        return (\n            <div className=\"padding-y\">\n                <div className=\"card\">\n                    <h2>Products Purchased <span>- What products have they interacted with?</span></h2>   \n                    <div className=\"selectRow\">\n                        <Select\n                        value={purchasOption1State}\n                        onChange={changePurchaseOption1State}\n                        options={optionsPurchase1}\n                        className=\"conditionSelect\"\n                        />\n                        <Select\n                        value={operatorOption1State}\n                        onChange={changeOperator1State}\n                        options={operatorValues}\n                        className=\"conditionSelect\"\n                        />\n                    </div>\n                    <div className=\"line\"></div>\n                    <h2>Time of purchase <span>- When did this purchase take place?</span></h2>  \n                    <div className=\"selectRow padding-y\">\n                        <Select\n                        value={purchasOption2State}\n                        onChange={changePurchaseOption2State}\n                        options={timeValues}\n                        className=\"conditionSelect\"\n                        />\n                        <Select\n                        value={operatorOption2State}\n                        onChange={changeOperator2State}\n                        options={operatorValues}\n                        className=\"conditionSelect\"\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    if (props.type === \"tech\") {\n        return (\n            <div className=\"padding-y\">\n                <div className=\"card\">\n                    <h2>Technology <span>- Which device, browser or operating system are they using?</span></h2>\n                    <Select\n                        value={techOption1State}\n                        onChange={changeTechOption1State}\n                        options={optionsTech1}\n                        className=\"conditionSelect\"\n                    />\n                </div>\n            </div>\n\n        )\n    }\n\n    if (props.type === \"custom\") {\n\n    }\n}\n\nexport default ConditionCard\n","import React, { useState } from 'react'\nimport './Condition.css'\nimport ConditionCard from './ConditionCard';\nimport Select from 'react-select';\n\n\nconst options = [\n    { value: 'purchase', label: 'Purchase History' },\n    { value: 'tech', label: 'Technology' },\n    { value: 'custom', label: 'Custom'}\n];\n\nconst Conditions = props => {\n\nconst [optionType, changeOptionType] = useState();\n\nlet conditionCards = props.conditionCards\n    return (\n        <div className=\"conditionRow\">\n            {conditionCards.map((conditionCard) => (\n                <ConditionCard \n                    type={conditionCard.type}        \n                />\n            ))}\n            <div className=\"card conditionFlex\">\n                <h2>New condition</h2>\n                <Select\n                    value={optionType}\n                    onChange={changeOptionType}\n                    options={options}\n                    className=\"conditionSelect\"\n                    />\n                \n                <button className=\"btn btnGreen\" onClick={() => props.dispatch({type: 'add'})}>+ Add</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Conditions\n","import React, { useReducer, useEffect } from 'react'\nimport './Main.css'\nimport TitleBar from './titlebar/TitleBar'\nimport SegmentIndicator from './segmentIndicator/SegmentIndicator';\nimport Conditions from './condition/Conditions';\n\nconst initState = { \n    progress: 90, \n    cardCount: 2, \n    conditionCards: [\n        {\n            type: \"purchase\"\n        },\n        {\n            type: \"tech\"\n        }\n    ]\n\n};\n\nfunction reducer(state, action) {\n    switch (action.type) {\n      case 'add': \n        return { ...state };\n      case 'delete':\n        return { questionCount: state.questionCount - 1, correctCount: state.correctCount, wrongCount: state.wrongCount, btnStyle: \"answerBtn\"  };\n      default:\n        return {questionCount: state.questionCount}\n    }\n  }\n\nconst Main = () => {\n\n    const [state, dispatch] = useReducer(reducer, initState);\n\n    useEffect(() => {\n\n    }, [state.cardCount])\n\n    return (\n        <div className=\"Main\">\n            <TitleBar />\n            <div className=\"cardArea\">\n                <div className=\"card instructionCard\">\n                    <h2>Define a new Segment</h2>\n                    <p>Add a Condition to define a segment. The more conditions you add the more specific your segment will be.</p>\n                </div>\n                <SegmentIndicator progress={state.progress} className=\"card\" />\n            </div>\n            <Conditions dispatch={dispatch} conditionCards={state.conditionCards} />\n        </div>\n    )\n}\n\nexport default Main\n","import React from 'react';\nimport './App.css';\nimport TopNav from './components/topNav/TopNav'\nimport Sidebar from './components/sidebar/Sidebar'\nimport Main from './components/main/Main'\n\nfunction App() {\n  return (\n    <div className=\"App gridContainer\">\n      <TopNav />\n      <Sidebar />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}